# Remove Cargo.lock from gitignore if creating an executable
# Cargo.lock
# Generated by Cargo
# will have compiled files and executables
# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
debug/
target/
# Bun & Node.js
node_modules/
.bun/
bun.lockb
package-lock.json
yarn.lock
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build output
dist/
build/
out/
.output/
*.tsbuildinfo

# API documentation
api-docs/

# flyctl reference directory
/flyctl/

# Test containers
#tests/containers/*
#!tests/containers/Dockerfile
#!tests/containers/mkosi.default
# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Test containers
tests/containers/*
!tests/containers/Dockerfile
!tests/containers/mkosi.default
# TypeScript cache
*.tsbuildinfo
.temp/
.cache/

# IDE and editors
.idea/
.vscode/
*.swp
*.swo
*~
.project
.classpath
.settings/
*.sublime-workspace
*.sublime-project

# OS specific files
.DS_Store
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Debug files
.debug/
debug/
debug.log

# Testing
coverage/
.nyc_output/

# Logs
logs/
*.log

# Rust output (if any Rust components)
target/
*.rs.bk
Cargo.lock

# Miscellaneous
.tmp/
.history/
.turbo/
.vercel/
.next/
**/.claude.json
.claude.json
